#pragma once
#include <string>
#include <iostream>
#include <cctype>
class Tree
{
	std::string _word;
	int _count;
	Tree *rbranch, *lbranch;
	Tree() {}
public:
	Tree(std::string word)
		: _count(1), rbranch(nullptr), lbranch(nullptr), _word(word)
	{
		std::cout << "ctor ";
	}
	void print_all_tree() const
	{
		if (rbranch) 
			rbranch->print_all_tree();
		std::cout << "word \"" << _word << "\" occurs " << _count << " times" << std::endl;
		if (lbranch) 
			lbranch->print_all_tree();
	}
	friend void tree_grow(Tree &, std::string &);
	friend std::ostream &operator<<(std::ostream &, const Tree &);
	friend Tree &operator++(Tree &);
	friend bool operator==(const Tree &, const std::string &);
	friend bool operator<(const Tree &, const std::string &);
	~Tree() 
	{
		std::cout << "dtor ";
		if (lbranch) 
			delete lbranch;
		if (rbranch) 
			delete rbranch;
	}
};


inline void delete_punct(std::string &str)
{	
	for (auto beg = str.begin(), end = str.end(); beg != end && !isalnum(*(str.end() - 1)); end = str.end())
		str.pop_back();
}
void tree_grow(Tree &tree, std::string &pattern)
{
	delete_punct(pattern);
	if (tree == pattern)
		++tree;
	else if (tree < pattern)
	{
		if (tree.lbranch) 
			tree_grow(*(tree.lbranch), pattern);
		else 
			tree.lbranch = new Tree(pattern);
	}
	else
	{
		if (tree.rbranch)
			tree_grow(*(tree.rbranch), pattern);
		else 
			tree.rbranch = new Tree(pattern);
	}
}
std::ostream &operator<<(std::ostream &out, const Tree &tree)
{
	out << tree._word;
	return out;
}
Tree &operator++(Tree &tree)
{
	++tree._count;
	return tree;
}
bool operator==(const Tree &tree, const std::string &str)
{
	if (tree._word == str)
		return true;
	else
		return false;
}
bool operator<(const Tree &tree, const std::string &str)
{
	if (tree._word < str)
		return true;
	else
		return false;
}
