#include <string>
#include <iostream>
#include <cctype>
class Tree
{
	std::string _word;
	int _count;
	Tree *rbranch, *lbranch;
public:
	Tree() = delete;
	Tree(std::string word)
		: _count(1), rbranch(nullptr), lbranch(nullptr), _word(word)
	{
	}
	void print_all_tree() const
	{
		if (rbranch) 
			rbranch->print_all_tree();
		std::cout << "word \"" << _word << "\" occurs " << _count << " times" << std::endl;
		if (lbranch) 
			lbranch->print_all_tree();
	}
	friend void tree_grow(Tree *&, std::string &);
	friend std::ostream &operator<<(std::ostream &, const Tree &);
	~Tree() 
	{
		delete lbranch;
		delete rbranch;
	}
};


inline void delete_punct(std::string &str)
{	
	std::string::size_type pos = 0;
	while (pos != str.size())
	{
		if (!isalnum(str.at(pos)))
			str.erase(pos, 1);
		else
			++pos;
	}
}
void tree_grow(Tree *&tree, std::string &pattern)
{
	delete_punct(pattern);
	if (!tree)
	{
		tree = new Tree(pattern);
		return;
	}
	if (tree->_word == pattern)
		++(tree->_count);
	else if (tree->_word < pattern)
	{
		tree_grow(tree->lbranch, pattern);
	}
	else
	{
		tree_grow(tree->rbranch, pattern);
	}
}
inline std::ostream &operator<<(std::ostream &out, const Tree &tree)
{
	out << tree._word;
	return out;
}

int main()
{
	std::string cur_str;
	std::cin >> cur_str;
	delete_punct(cur_str);
	Tree *root = new Tree(cur_str);
	while (std::cin >> cur_str)
	{
		tree_grow(root, cur_str);
	}
	root->print_all_tree();
	return 0;
}
